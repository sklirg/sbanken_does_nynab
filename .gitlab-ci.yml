stages:
  - build
  - test
  - prepare
  - deploy

variables:
  # Package version can only contain numbers (0-9), and dots (.).
  # Must be in the format of X.Y.Z, i.e. should match /\A\d+\.\d+\.\d+\z/ regular expresion.
  # See https://docs.gitlab.com/ee/user/packages/generic_packages/#publish-a-package-file
  LINUX_AMD64_BINARY: "sbanken_does_nynab-linux-amd64-${CARGO_VERSION}"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sbanken_does_nynab/${CARGO_VERSION}"


# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
# before_script:
#   - apt-get update -yqq
#   - apt-get install -yqq --no-install-recommends build-essential


build:cargo:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - rustc --version && cargo --version
    - cargo build --verbose --release
    - grep -e "^version" Cargo.toml | tr -d "\"" | sed -e 's/version = /CARGO_VERSION=/' >> variables.env
  artifacts:
    paths:
      - target/release/sbanken_does_nynab
    expire_in: 1 week
    reports:
      dotenv: variables.env

# Use cargo to test the project
test:cargo:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - rustc --version && cargo --version
    - cargo test --workspace --verbose

prepare-release:
  stage: prepare
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build:cargo
      artifacts: true
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file target/release/sbanken_does_nynab ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}

release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: prepare-release
      artifacts: true
    - job: build:cargo
      artifacts: true
  script:
    - echo 'running release job for $CARGO_VERSION'
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CARGO_VERSION \
        --assets-link "{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}"
